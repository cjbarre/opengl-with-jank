(ns app.math.core)

(cpp/raw "#include <glm/glm.hpp> 
          #include <glm/gtc/matrix_transform.hpp> 
          #include <glm/gtc/type_ptr.hpp>")

(defmacro *->
  "Unboxes a boxed pointer based on type keyword.
   For single values, dereferences the pointer to get the value.
   For arrays, returns the pointer for array access.
   Currently supports:
   - (*-> :vec3 ptr) -> dereferences for single values
   - (*-> :vec3s ptr) -> unboxed pointer for array access"
  [type ptr]
  (case type
    :float `(cpp/* (cpp/unbox cpp/float* ~ptr))
    :vec3 `(cpp/* (cpp/unbox cpp/glm.vec3* ~ptr))
    :vec3s `(cpp/unbox cpp/glm.vec3* ~ptr)
    (throw (ex-info "Unsupported type for *->" {:type type}))))

(defmacro gimmie
  "Experimental macro for creating math objects.
   Currently supports:
   - (gimmie :vec3 [x y z]) -> unboxed glm::vec3
   - (gimmie :boxed :vec3 [x y z]) -> boxed glm::vec3* pointer
   - (gimmie :vec3s [[x y z] ...]) -> boxed glm::vec3* pointer to array data
   - (gimmie :boxed :vec3s [[x y z] ...]) -> boxed glm::vec3* pointer to array data"
  [type-or-boxed & args]
  (let [boxed? (= :boxed type-or-boxed)
        type (if boxed? (first args) type-or-boxed)
        data (if boxed? (second args) (first args))]
    (case type
      :float 
      `(cpp/box (cpp/new cpp/float (cpp/float ~data)))
      :vec3 ;; Single vector only
      (let [[x y z] data
            vec-expr `(cpp/glm.vec3
                       (cpp/float ~x)
                       (cpp/float ~y)
                       (cpp/float ~z))]
        (if boxed?
          `(cpp/box (cpp/new cpp/glm.vec3 ~vec-expr))
          vec-expr))

      :vec3s ;; Array of vectors
      (let [vec-count (count data)
            arr-sym (gensym "arr_")
            ptr-sym (gensym "ptr_")
            array-creation `(cpp/new (cpp/type ~(str "std::array<glm::vec3, " vec-count ">")))
            assignments (map-indexed
                         (fn [idx [x y z]]
                           `(aset (cpp/* ~arr-sym)
                                  (cpp/int ~idx)
                                  (cpp/glm.vec3
                                   (cpp/float ~x)
                                   (cpp/float ~y)
                                   (cpp/float ~z))))
                         data)]
        `(let [~arr-sym ~array-creation
               ~@(interleave (repeatedly (count assignments) (fn [] '_))
                             assignments)
               ~ptr-sym (cpp/.data (cpp/* ~arr-sym))]
           ~(if boxed?
              `(cpp/box ~ptr-sym)
              ptr-sym)))

      (throw (ex-info "Unsupported type" {:type type})))))