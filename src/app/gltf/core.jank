(ns app.gltf.core
  (:refer-clojure :exclude [load])
  (:require [app.shaders.interface :as shaders]
            [app.macros :refer [clet]]))

(cpp/raw
 "#define CGLTF_IMPLEMENTATION
  #include \"cgltf.h\"")

(defmulti parse-attribute (fn [attribute] (cpp/.-type (cpp/unbox cpp/cgltf_attribute* attribute))))

(defmethod parse-attribute cpp/cgltf_attribute_type_position
  [attribute]
  (let [attribute (cpp/unbox cpp/cgltf_attribute* attribute)
        accessor (cpp/* (cpp/.-data attribute))
        count (cpp/.-count accessor)
        accessor-box (cpp/box (cpp/& accessor))]
    {:positions
     (mapv (fn [i]
             (clet [accessor (cpp/unbox cpp/cgltf_accessor* accessor-box)
                    size (cpp/cgltf_num_components (cpp/.-type accessor))
                    v ((cpp/type "std::array<float, 3>"))
                    result (cpp/cgltf_accessor_read_float accessor (cpp/cgltf_size i) (cpp/.data v) size)
                    :when (cpp/! result)
                    :error (throw (ex-info "Could not parse position attribute" {}))]
                   [(cpp/aget v (cpp/int 0)) (cpp/aget v (cpp/int 1)) (cpp/aget v (cpp/int 2))]))
           (range count))}))

(defmethod parse-attribute cpp/cgltf_attribute_type_normal
  [attribute]
  (let [attribute (cpp/unbox cpp/cgltf_attribute* attribute)
        accessor (cpp/* (cpp/.-data attribute))
        count (cpp/.-count accessor)
        size (cpp/cgltf_num_components (cpp/.-type accessor))
        accessor-box (cpp/box (cpp/& accessor))]
    {:normals
     (mapv (fn [i]
             (clet [accessor (cpp/unbox cpp/cgltf_accessor* accessor-box) 
                    v ((cpp/type "std::array<float, 3>"))
                    result (cpp/cgltf_accessor_read_float accessor (cpp/cgltf_size i) (cpp/.data v) size)
                    :when (cpp/! result)
                    :error (throw (ex-info "Could not parse normal attribute" {}))]
                   [(cpp/aget v (cpp/int 0)) (cpp/aget v (cpp/int 1)) (cpp/aget v (cpp/int 2))]))
           (range count))}))

(defmethod parse-attribute cpp/cgltf_attribute_type_texcoord
  [attribute]
  (let [attribute (cpp/unbox cpp/cgltf_attribute* attribute)
        accessor (cpp/* (cpp/.-data attribute))
        count (cpp/.-count accessor)
        size (cpp/cgltf_num_components (cpp/.-type accessor))
        accessor-box (cpp/box (cpp/& accessor))]
    {:uvs
     (mapv (fn [i]
             (clet [accessor (cpp/unbox cpp/cgltf_accessor* accessor-box)
                    v ((cpp/type "std::array<float, 2>"))
                    result (cpp/cgltf_accessor_read_float accessor (cpp/cgltf_size i) (cpp/.data v) size)
                    :when (cpp/! result)
                    :error (throw (ex-info "Could not parse uv attribute" {}))]
                   [(cpp/aget v (cpp/int 0)) (cpp/aget v (cpp/int 1))]))
           (range count))}))

(defmethod parse-attribute :default
  [attribute]
  (let [attribute (cpp/unbox cpp/cgltf_attribute* attribute)]
    {(cpp/.-type attribute) :not-implemented}))

(defn parse-indices
  [primitive]
  (let [primitive (cpp/unbox cpp/cgltf_primitive* primitive)
        accessor (cpp/* (cpp/.-indices primitive))
        count (cpp/.-count accessor)
        accessor-box (cpp/box (cpp/& accessor))]
    {:indices
     (mapv (fn [i]
             (clet [accessor (cpp/unbox cpp/cgltf_accessor* accessor-box)]
                   (cpp/cgltf_accessor_read_index accessor (cpp/cgltf_size i))))
           (range count))}))

(defn parse [{:keys [path] :as args}]
  (clet [options (cpp/cgltf_options)
         data (cpp/cgltf_data* cpp/nullptr)
         result (cpp/cgltf_parse_file (cpp/& options) path (cpp/& data))
         :when (cpp/!= result cpp/cgltf_result_success)
         :error (throw (ex-info "Could not parse GLTF file" (assoc args :error result)))
         result (cpp/cgltf_load_buffers (cpp/& options) data path)
         :when (cpp/!= result cpp/cgltf_result_success)
         :error (throw (ex-info "Cloud not load GLTF buffers" (assoc args :error result)))
         meshes (cpp/box (cpp/.-meshes data))
         model-data (vec
                     (for [i (range (cpp/.-meshes_count data))
                           :let [meshes        (cpp/unbox cpp/cgltf_mesh* meshes)
                                 mesh          (cpp/aget meshes (cpp/int i))
                                 mesh-name     (str (cpp/.-name mesh))
                                 primitives-box (cpp/box (cpp/.-primitives mesh))]]

                       {:name mesh-name
                        :primitives
                        (vec (for [j (range (cpp/.-primitives_count mesh))
                                   :let [primitives     (cpp/unbox cpp/cgltf_primitive* primitives-box)
                                         primitive      (cpp/aget primitives (cpp/int j))
                                         attributes-box (cpp/box (cpp/.-attributes primitive))]]

                               (reduce
                                (fn [acc k]
                                  (let [attributes (cpp/unbox cpp/cgltf_attribute* attributes-box)
                                        attribute  (cpp/box (cpp/& (cpp/aget attributes (cpp/int k))))]
                                    (if-let [result (parse-attribute attribute)]
                                      (merge acc result)
                                      acc)))
                                (parse-indices (cpp/box (cpp/& primitive)))
                                (range (cpp/.-attributes_count primitive)))))}))]
        {:path path
         :data model-data}))

(cpp/raw 
 "struct Vertex {
    float pos[3];
    float norm[3];
    float uv[2];

    Vertex(float px, float py, float pz,
           float nx, float ny, float nz,
           float u, float v) {
        pos[0]=px; pos[1]=py; pos[2]=pz;
        norm[0]=nx; norm[1]=ny; norm[2]=nz;
        uv[0]=u; uv[1]=v;
    }

    Vertex() { // default ctor for array allocation
        pos[0]=pos[1]=pos[2]=0.0f;
        norm[0]=norm[1]=norm[2]=0.0f;
        uv[0]=uv[1]=0.0f;
    }
  };
  
  size_t int_size = sizeof(int);
    
  size_t vertex_size = sizeof(Vertex);")

(def GL_ARRAY_BUFFER (cpp/value "GL_ARRAY_BUFFER"))
(def GL_ELEMENT_ARRAY_BUFFER (cpp/value "GL_ELEMENT_ARRAY_BUFFER"))
(def GL_STATIC_DRAW (cpp/value "GL_STATIC_DRAW"))
(def GL_FLOAT (cpp/value "GL_FLOAT"))
(def GL_FALSE (cpp/value "GL_FALSE"))
(def GL_TRIANGLES (cpp/value "GL_TRIANGLES"))

(defn load
  [{:keys [model]}]
  (let [draw-fns
        (for [mesh (:data model)
              {:keys [positions normals uvs] :as primitive} (:primitives mesh)]
          (clet [vertices ((cpp/type "std::vector<Vertex>"))
                 vertices-box (cpp/box (cpp/& vertices))
                 _ (doseq [i (range (count positions))]
                     (let [vertices* (cpp/unbox
                                      (cpp/type "std::vector<Vertex>*")
                                      vertices-box)
                           [px py pz] (get positions i)
                           [nx ny nz] (get normals i)
                           [u v] (get uvs i)]
                       (cpp/.push_back
                        vertices*
                        (cpp/Vertex
                         (cpp/float px)
                         (cpp/float py)
                         (cpp/float pz)
                         (cpp/float nx)
                         (cpp/float ny)
                         (cpp/float nz)
                         (cpp/float u)
                         (cpp/float v)))))

                 indices ((cpp/type "std::vector<int>"))
                 indices-box (cpp/box (cpp/& indices))
                 _ (doseq [i (range (count (:indices primitive)))]
                     (let [indices* (cpp/unbox (cpp/type "std::vector<int>*") indices-box)
                           index (get (:indices primitive) i)]
                       (cpp/.push_back indices* (cpp/int index))))
                 indices-size (cpp/.size indices)
                 vao (shaders/create-vertex-array-object)
                 _ (shaders/bind-vertex-array-object
                    {:vertex-array-object-id vao})

                 ;;
                 ;; VBO
                 ;;
                 vbo ((cpp/type "unsigned int"))
                 _ (cpp/glGenBuffers (cpp/int 1) (cpp/& vbo))
                 _ (cpp/glBindBuffer GL_ARRAY_BUFFER vbo)
                 _ (cpp/glBufferData GL_ARRAY_BUFFER
                                     (cpp/* (cpp/.size vertices) cpp/vertex_size)
                                     (cpp/cast (cpp/type "void*")
                                               (cpp/.data vertices))
                                     GL_STATIC_DRAW)

                 ;;
                 ;; EBO
                 ;;
                 ebo ((cpp/type "unsigned int"))
                 _ (cpp/glGenBuffers (cpp/int 1) (cpp/& ebo))
                 _ (cpp/glBindBuffer GL_ELEMENT_ARRAY_BUFFER ebo)
                 _ (cpp/glBufferData GL_ELEMENT_ARRAY_BUFFER
                                     (cpp/* indices-size cpp/int_size)
                                     (cpp/cast (cpp/type "void*")
                                               (cpp/.data indices))
                                     GL_STATIC_DRAW)

                 ;;
                 ;; Vertex Attributes 
                 ;;
                 _ (cpp/glVertexAttribPointer 0
                                              3
                                              GL_FLOAT
                                              GL_FALSE
                                              cpp/vertex_size
                                              (cpp/voidify_int 0))
                 _ (cpp/glEnableVertexAttribArray 0)

                 _ (cpp/glVertexAttribPointer 1
                                              3
                                              GL_FLOAT
                                              GL_FALSE
                                              cpp/vertex_size
                                              (cpp/voidify_int (cpp/* (cpp/int 3) cpp/float_size)))
                 _ (cpp/glEnableVertexAttribArray 1)

                 _ (cpp/glVertexAttribPointer 2
                                              2
                                              GL_FLOAT
                                              GL_FALSE
                                              cpp/vertex_size
                                              (cpp/voidify_int (cpp/* (cpp/int 6) cpp/float_size)))
                 _ (cpp/glEnableVertexAttribArray 2)]
                (fn draw-primitive []
                  (shaders/bind-vertex-array-object
                   {:vertex-array-object-id vao})
                  (cpp/glDrawElements
                   GL_TRIANGLES
                   (count (:indices primitive))
                   (cpp/value "GL_UNSIGNED_INT")
                   (cpp/voidify_int (cpp/int 0))))))]
    (fn draw-model []
      (doseq [f draw-fns]
        (f)))))


